# –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ñ –±—ñ–±–ª—ñ–æ—Ç–µ–∫–∏
import time
import json
import re
import asyncio

# –ó–æ–≤–Ω—ñ—à–Ω—ñ –±—ñ–±–ª—ñ–æ—Ç–µ–∫–∏
import requests
import httpx
from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from telegram import Update
from bs4 import BeautifulSoup
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    CallbackContext
)

# –í—Å—Ç–∞–≤ —Å–≤—ñ–π —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ —Ç—É—Ç
TOKEN = "7980921102:AAHgQrVa2ErfaQOLv7B_GJG__mDAiCV0s0k"

async def start(update: Update, context: CallbackContext) -> None:
    try:
        message = (
            "üëã *–í—ñ—Ç–∞—é!*  \n\n"
            "–Ø –±–æ—Ç –¥–ª—è –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É –∑–±–æ—Ä—É –∫–æ—à—Ç—ñ–≤ –±–ª–∞–≥–æ–¥—ñ–π–Ω–æ—ó —ñ–Ω—ñ—Ü—ñ–∞—Ç–∏–≤–∏ *–≤–î–æ–Ω–∞—Ç*. –¢—É—Ç —Ç–∏ –º–æ–∂–µ—à –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —Å—Ç–∞–Ω –∑–±–æ—Ä—É —Ç–∞ –¥—ñ–∑–Ω–∞—Ç–∏—Å—è, "
            "—Å–∫—ñ–ª—å–∫–∏ —â–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑—ñ–±—Ä–∞—Ç–∏. üí∞  \n\n"
            "üìå –î–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É –∫–æ–º–∞–Ω–¥ –≤–≤–µ–¥–∏ `/help`"
        )
        await update.message.reply_text(message, parse_mode="Markdown")
    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ –≤ –∫–æ–º–∞–Ω–¥—ñ /start: {e}")  # –õ–æ–≥—É–≤–∞–Ω–Ω—è –ø–æ–º–∏–ª–∫–∏


async def check_mono_amount(update: Update, context: CallbackContext, silent=False) -> None:
    url = "https://send.monobank.ua/api/handler"
    headers = {
        "sec-ch-ua-platform": "\"Windows\"",
        "Referer": "",
        "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/133.0.0.0 Safari/537.36",
        "Accept": "application/json; charset=utf-8; lang=en",
        "sec-ch-ua": "\"Not(A:Brand)\";v=\"99\", \"Google Chrome\";v=\"133\", \"Chromium\";v=\"133\"",
        "Content-Type": "text/plain; charset=UTF-8",
        "sec-ch-ua-mobile": "?0"
    }
    
    data = {
        "c": "hello",
        "clientId": "4dcU5kCTq8",
        "referer": "",
        "Pc": "BAxznRTunHbDeDGc6Q2EL6kH0usCYs6c4F/ldGi5POMuzwKjKRkjmgq1JI3WQU4/iydIUFDXBDXUX+pOSK4LHSA="
    }
    
    response = requests.post(url, headers=headers, json=data)
    
    if response.status_code == 200:
        try:
            response_json = response.json()
            jar_amount = response_json.get("jarAmount", "–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö")
            real_jar_amount = jar_amount/100
            if silent is False:
                message = f"üè¶ *–ó—ñ–±—Ä–∞–Ω–æ –Ω–∞ Mono:* `{real_jar_amount} UAH`"
                await update.message.reply_text(message, parse_mode="MarkdownV2")
            return float(real_jar_amount)
        except json.JSONDecodeError:
            await update.message.reply_text("–ù–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑–ø–∞—Ä—Å–∏—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å —Å–µ—Ä–≤–µ—Ä–∞.")
    else:
        await update.message.reply_text(f"–ü–æ–º–∏–ª–∫–∞ {response.status_code}: {response.text}")
    return 0

async def check_privat_amount(update: Update, context: CallbackContext, silent=False) -> None:
    # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è Selenium
    options = Options()
    options.add_argument("--headless")
    options.add_argument("user-agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/133.0.0.0 Safari/537.36")

    driver = webdriver.Chrome(options=options)

    try:
        driver.get("https://next.privat24.ua/send/h0njb")
        cookies = {c["name"]: c["value"] for c in driver.get_cookies()}

        pubkey = cookies.get("pubkey")
        if not pubkey:
            print("pubkey –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
            return

        print("pubkey:", pubkey)

        time_now = int(time.time() * 1000)  # –ì–µ–Ω–µ—Ä—É—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π timestamp
    
        headers_for_xref = {
            "accept": "application/json, text/plain, */*",
            "accept-language": "en-US,en;q=0.9,uk;q=0.8",
            "cache-control": "no-cache",
            "content-type": "application/json",
            "origin": "https://next.privat24.ua",
            "pragma": "no-cache",
            "priority": "u=1, i",
            "referer": "https://next.privat24.ua/send/h0njb",
            "sec-ch-ua": '"Not(A:Brand";v="99", "Google Chrome";v="133", "Chromium";v="133")',
            "sec-ch-ua-mobile": "?0",
            "sec-ch-ua-platform": '"Windows"',
            "sec-fetch-dest": "empty",
            "sec-fetch-mode": "cors",
            "sec-fetch-site": "same-origin",
            "user-agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/133.0.0.0 Safari/537.36",
            "x-requested-with-alias": "testRandomToken",
            "cookie": f"i18next=uk; pubkey={pubkey}"
        }

        data_for_xref = {
            "lang": "ua",
            "_": time_now
        }

        url_for_xref = f"https://next.privat24.ua/api/p24/init?lang=ua&_={time_now}"

        async with httpx.AsyncClient() as client:
            response = await client.post(url_for_xref, headers=headers_for_xref, json=data_for_xref)

        try:
            xref = response.json()["data"]["xref"]
        except (KeyError, TypeError):
            return

        url_for_get_balance = "https://next.privat24.ua/api/p24/pub/envelopes/pubinfo"

        headers_for_get_balance = {
            "accept": "application/json, text/plain, */*",
            "content-type": "application/json",
            "origin": "https://next.privat24.ua",
            "referer": "https://next.privat24.ua/send/h0njb",
            "user-agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/133.0.0.0 Safari/537.36",
            "cookie": f"i18next=uk; pubkey={pubkey}"
        }

        data_for_get_balance = {
            "xref": xref,
            "refEnv": "SAMDNWFC000127555453",
            "_": int(time.time() * 1000)
        }

        async with httpx.AsyncClient() as client:
            response = await client.post(url_for_get_balance, headers=headers_for_get_balance, json=data_for_get_balance)

        if response.status_code == 200:
            try:
                response_json = response.json()
                if "data" in response_json and "availableBalance" in response_json["data"]:
                    collected_amount = response_json["data"]["availableBalance"][:-3] 

                    if silent is False:
                        message = f"üè¶ *–ó—ñ–±—Ä–∞–Ω–æ –Ω–∞ Privat:* `{collected_amount} UAH`"
                        await update.message.reply_text(message, parse_mode="MarkdownV2")
                    return int(collected_amount)
                else:
                    print("–ü–æ–º–∏–ª–∫–∞: —É –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ API –Ω–µ–º–∞—î 'availableBalance'.")
            except httpx.HTTPStatusError:
                print("–ü–æ–º–∏–ª–∫–∞: –Ω–µ–º–æ–∂–ª–∏–≤–æ —Ä–æ–∑–ø–∞—Ä—Å–∏—Ç–∏ JSON.")
        else:
            print(f"–ü–æ–º–∏–ª–∫–∞ {response.status_code}: {response.text}")
    finally:
        driver.quit()

async def check_novapay_amount(update:Update, context:CallbackContext, silent=False) -> None:
    # URL, –∑ —è–∫–æ–≥–æ –æ—Ç—Ä–∏–º—É—î–º–æ HTML
    url = "https://e-com.novapay.ua/case/QJeEes1Y1s?og=true"

    # –ó–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –∑–∞–ø–∏—Ç—É
    headers = {
        "accept": "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8",
        "cache-control": "no-cache",
        "pragma": "no-cache",
        "referer": "https://campsite.bio/",
        "sec-ch-ua": "\"Not(A:Brand\";v=\"99\", \"Google Chrome\";v=\"133\", \"Chromium\";v=\"133\"",
        "sec-ch-ua-mobile": "?0",
        "sec-ch-ua-platform": "\"Windows\"",
        "sec-fetch-dest": "document",
        "sec-fetch-mode": "navigate",
        "sec-fetch-site": "cross-site",
        "sec-fetch-user": "?1",
        "upgrade-insecure-requests": "1",
        "user-agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/133.0.0.0 Safari/537.36"
    }

    # –ö—É–∫—ñ (–º–æ–∂–ª–∏–≤–æ, –¥–æ–≤–µ–¥–µ—Ç—å—Å—è –æ–Ω–æ–≤–ª—é–≤–∞—Ç–∏ –ø–µ—Ä–µ–¥ –∫–æ–∂–Ω–∏–º –∑–∞–ø–∏—Ç–æ–º)
    cookies = {
        "_cfuvid": "ISHldXlRExFMoy021VH_2D13YPXST6sKieLp5IaET30-1740839406690-0.0.1.1-604800000",
        "cf_clearance": "zWFKr6WjNxZ0_ULkqzm20tiETlM6RjEmhSnFKcDrZwc-1740851051-1.2.1.1-XpfSUZu7okk..."
    }

    # –í–∏–∫–æ–Ω–∞–Ω–Ω—è –∑–∞–ø–∏—Ç—É
    response = requests.get(url, headers=headers, cookies=cookies)

    # –í–∏–≤—ñ–¥ HTML-–∫–æ–¥—É —Å—Ç–æ—Ä—ñ–Ω–∫–∏

    if response.status_code == 200:
        html = response.text
        soup = BeautifulSoup(html, "html.parser")

    # –ó–Ω–∞–π—Ç–∏ –ø–æ—Ç—Ä—ñ–±–Ω–∏–π div –∑–∞ –∫–ª–∞—Å–∞–º–∏
    script_tag = soup.find("script", string=lambda text: text and "window.__NOVA_DATA__" in text)
    if script_tag:
	    text = script_tag.string

	    # –∑–Ω–∞—Ö–æ–¥–∏–º–æ —à–º–∞—Ç–æ–∫ JSON
	    match = re.search(r'window\.__NOVA_DATA__\s*=\s*({.*});', text)
	    if match:
	        data_str = match.group(1)
	        data = json.loads(data_str)
	        amount = float(data.get("balance").replace(" ", ""))

    if silent is False:
        message = f"üè¶ *–ó—ñ–±—Ä–∞–Ω–æ –Ω–∞ NovaPay:* {amount:.2f} UAH".replace(".", "\\.")
        await update.message.reply_text(message, parse_mode="MarkdownV2")

    return amount

    
async def check_minibanker_progress(update: Update, context: CallbackContext) -> None:
    # --- –ú—ñ–Ω—ñ–±–∞–Ω–∫—ñ—Ä–∏ ---
    minibankers = context.bot_data.get("minibankers", {})
    minibanker_data = {}
    minibanker_total = 0
    message = ''

    for name, jar_id in minibankers.items():
        try:
            url = "https://send.monobank.ua/api/handler"
            headers = {
                "User-Agent": "Mozilla/5.0",
                "Content-Type": "application/json",
            }
            data = {
                "c": "hello",
                "clientId": jar_id,
                "referer": "",
                "Pc": "BAxznRTunHbDeDGc6Q2EL6kH0usCYs6c4F/ldGi5POMuzwKjKRkjmgq1JI3WQU4/iydIUFDXBDXUX+pOSK4LHSA="

            }

            print(f"‚ñ∂Ô∏è –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ {name}: {jar_id}")
            response = requests.post(url, headers=headers, json=data)

            if response.status_code == 200:
                response_json = response.json()
                print(response_json)
                jar_amount = response_json.get("jarAmount", 0)
                try:
                    real_jar_amount = float(jar_amount) / 100
                except (ValueError, TypeError):
                    real_jar_amount = 0.0
                    print(f"‚ö†Ô∏è jarAmount –Ω–µ —á–∏—Å–ª–æ –¥–ª—è {name}: {jar_amount}")

                minibanker_data[name] = real_jar_amount
                minibanker_total += real_jar_amount
            else:
                print(f"‚ùó –ü–æ–º–∏–ª–∫–∞ {response.status_code} –¥–ª—è {name}: {response.text}")
                await update.message.reply_text(
                    f"‚ùó –ü–æ–º–∏–ª–∫–∞ {response.status_code} –ø—Ä–∏ –∑–∞–ø–∏—Ç—ñ –¥–æ Mono –¥–ª—è {name}:\n{response.text}"
                )

        except Exception as e:
            print(f"‚ùó –í–∏–Ω—è—Ç–æ–∫ —É –º—ñ–Ω—ñ–±–∞–Ω–∫—ñ—Ä–∞ {name}: {e}")
            await update.message.reply_text(f"‚ùó –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –æ–±—Ä–æ–±–∫–∏ –º—ñ–Ω—ñ–±–∞–Ω–∫—ñ—Ä–∞ {name}:\n{e}")

    if minibanker_data:
        message += f"\n\nüë• *–ó–±—ñ—Ä –º—ñ–Ω—ñ–±–∞–Ω–∫—ñ—Ä—ñ–≤:* `{minibanker_total:,.2f} UAH`"
        for name, amount in minibanker_data.items():
            message += f"\n‚ñ´Ô∏è *{escape_markdown_v2(name)}*: `{amount:,.2f} UAH`"
    else:
        message = '–©–µ –Ω–µ–º–∞—î –º—ñ–Ω—ñ–±–∞–Ω–∫—ñ—Ä—ñ–≤'
    await update.message.reply_text(message, parse_mode="MarkdownV2")
    
def fetch_minibankers_total(bot_data: dict) -> float:
    mini_total = 0.0
    print(bot_data.get("minibankers", {}).values())
    for jar_id in bot_data.get("minibankers", {}).values():
        resp = requests.post(
            "https://send.monobank.ua/api/handler",
            headers={"User-Agent": "Mozilla/5.0", "Content-Type": "application/json"},
            json={"c": "hello", "clientId": jar_id, "referer": "", "Pc": "BAxznRTunHbDeDGc6Q2EL6kH0usCYs6c4F/ldGi5POMuzwKjKRkjmgq1JI3WQU4/iydIUFDXBDXUX+pOSK4LHSA="}
        )
        if resp.status_code == 200:
            jar = resp.json().get("jarAmount", 0)
            mini_total += jar / 100.0
    return mini_total



async def acumulated_sum(update: Update, context: CallbackContext) -> None:
    mono = await check_mono_amount(update, context, silent=True) or 0.0
    privat = await check_privat_amount(update, context, silent=True) or 0.0
    novapay = await check_novapay_amount(update, context, silent=True) or 0.0

    # ‚Äî‚Äî‚Äî –ø—ñ–¥—Ä–∞—Ö—É–Ω–æ–∫ –≤–Ω–µ—Å–∫—É –º—ñ–Ω—ñ–±–∞–Ω–∫—ñ—Ä—ñ–≤ ‚Äî‚Äî‚Äî
    minibankers = context.bot_data.get("minibankers", {})
    mini_total = fetch_minibankers_total(context.bot_data)

    total_goal = context.bot_data.get("total_goal", 630000)
    spent = context.bot_data.get("spent_amount", 0)

    total_cards = float(mono) + float(privat) + float(novapay)
    total_all = total_cards + spent
    
    progress = (total_cards + spent) / total_goal * 100
    needed_amount = total_goal - total_cards - spent
    sami_total = total_all - mini_total
    
    message = (
    f"*–í—Å—å–æ–≥–æ –∑—ñ–±—Ä–∞–Ω–æ:* `{total_all:,.2f} UAH`\n"
    f"*–ó–∞–ª–∏—à–∏–ª–æ—Å—å –∑—ñ–±—Ä–∞—Ç–∏:* `{needed_amount:,.2f} UAH`\n\n"
    f"*–ü—Ä–æ–≥—Ä–µ—Å:* `{progress:.2f}%`\n\n"
    "üè¶üè¶üè¶üè¶üè¶\n\n"
    f"*–°–∞–º—ñ –∑—ñ–±—Ä–∞–ª–∏:* `{sami_total:,.2f} UAH`\n"
    f"*–ú—ñ–Ω—ñ–±–∞–Ω–∫—ñ—Ä–∏:* `{mini_total:,.2f} UAH`\n\n"
    "üè¶üè¶üè¶üè¶üè¶\n\n"
    f"*–í–∂–µ –∑–Ω—è—Ç–æ:* `{spent:,.2f} UAH`\n"
    f"*–ó–∞—Ä–∞–∑ –Ω–∞ —Ä–∞—Ö—É–Ω–∫–∞—Ö:* `{total_cards:,.2f} UAH`\n\n"
    "üè¶üè¶üè¶üè¶üè¶\n\n"
    f"*–º–æ–Ω–æ:* `{mono:,.2f}`\n"
    f"*–ø—Ä–∏–≤–∞—Ç:* `{privat:,.2f}`\n"
    f"*–Ω–æ–≤–∞–ø–µ–π:* `{novapay:,.2f}`"
)




    # –§–æ—Ä–º–∞—Ç–æ–≤–∞–Ω–∏–π —Ä—è–¥–æ–∫

    await update.message.reply_text(message, parse_mode="MarkdownV2")

async def help_command(update: Update, context: CallbackContext) -> None:
    message = (
        "üìå *–î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:*\n\n"
        "‚ñ∂Ô∏è `/start` ‚Äì –ü–æ—á–∞—Ç–∏ —Ä–æ–±–æ—Ç—É –∑ –±–æ—Ç–æ–º\n"
        "üí≥ `/check_mono_amount` ‚Äì –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –±–∞–ª–∞–Ω—Å Mono\n"
        "üè¶ `/check_privat_amount` ‚Äì –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –±–∞–ª–∞–Ω—Å Privat\n"
        "üìÆ `/check_novapay_amount` ‚Äì –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –±–∞–ª–∞–Ω—Å NovaPay\n"
        "üìä `/acumulated_sum` ‚Äì –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –∑–∞–≥–∞–ª—å–Ω—É —Å—É–º—É –∑–±–æ—Ä—É\n"
        "üòº `/set_goal` ‚Äì –ó–º—ñ–Ω–∏—Ç–∏ —Ü—ñ–ª—å–æ–≤—É —Å—É–º—É –∑–±–æ—Ä—É\n"
         "üí∏ `/set_spent` ‚Äì –î–æ–¥–∞—Ç–∏ —Å—É–º—É –∑–Ω—è—Ç–∏—Ö –∫–æ—à—Ç—ñ–≤\n"
        "ü•∏ `/add_minibanker` ‚Äì –î–æ–¥–∞—Ç–∏ –º—ñ–Ω—ñ–±–∞–Ω–∫—ñ—Ä–∞ —É —Ñ–æ—Ä–º–∞—Ç—ñ: –∫–æ–º–∞–Ω–¥–∞ –Ü–º'—è –ø–æ—Å–∏–ª–∞–Ω–Ω—è\n"
         "üë∂ `/check_minibanker_progress` ‚Äì –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –ø—Ä–æ–≥—Ä–µ—Å –º—ñ–Ω—ñ–±–∞–Ω–∫—ñ—Ä—ñ–≤\n"
        "‚ùì `/help` ‚Äì –ü–æ–∫–∞–∑–∞—Ç–∏ —Ü–µ –º–µ–Ω—é"
    )
    
    await update.message.reply_text(message, parse_mode="MarkdownV2")

def escape_markdown_v2(text: str) -> str:
    return re.sub(r'([_\*\[\]\(\)~`>#+=|{}.!-])', r'\\\1', text)


async def set_goal(update: Update, context: CallbackContext) -> None:
    message = update.message
    if message is None:
        return  # –ù–µ–º–∞—î —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, –Ω—ñ—á–æ–≥–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—Ç–∏

    try:
        if context.args:
            goal = float(context.args[0].replace(",", "").strip())
            context.bot_data["total_goal"] = goal
            text = f"‚úÖ –¶—ñ–ª—å–æ–≤—É —Å—É–º—É –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞ {goal:,.2f} UAH"
        else:
            text = "‚ùóÔ∏è –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥–∏ —Å—É–º—É –ø—ñ—Å–ª—è –∫–æ–º–∞–Ω–¥–∏"
    except ValueError:
        text = "‚ùóÔ∏è –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–∏. –í–≤–µ–¥–∏ —á–∏—Å–ª–æ"

    await message.reply_text(
        escape_markdown_v2(text),
        parse_mode="MarkdownV2"
    )
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    app = Application.builder().token(TOKEN).build()


async def set_spent(update: Update, context: CallbackContext) -> None:
    message = update.message
    if message is None:
        return

    try:
        if context.args:
            new_spent = float(context.args[0].replace(",", "").strip())
            current_spent = context.bot_data.get("spent_amount", 0.0)
            updated_spent = current_spent + new_spent
            context.bot_data["spent_amount"] = updated_spent

            text = f"‚úÖ –î–æ–¥–∞–Ω–æ {new_spent:,.2f} UAH –¥–æ –≤–∏—Ç—Ä–∞—á–µ–Ω–∏—Ö –∫–æ—à—Ç—ñ–≤.\nüí∏ –ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞ –≤–∏—Ç—Ä–∞—Ç: {updated_spent:,.2f} UAH"
        else:
            text = "‚ùóÔ∏è –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥–∏ —Å—É–º—É –ø—ñ—Å–ª—è –∫–æ–º–∞–Ω–¥–∏ `/set_spent <—Å—É–º–∞>`"
    except ValueError:
        text = "‚ùóÔ∏è –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–∏. –í–≤–µ–¥–∏ —á–∏—Å–ª–æ."

    await message.reply_text(
        escape_markdown_v2(text),
        parse_mode="MarkdownV2"
    )


async def add_minibanker(update: Update, context: CallbackContext) -> None:
    if len(context.args) != 2:
        await update.message.reply_text("‚ùóÔ∏è –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: /add_minibanker <—ñ–º'—è> <–ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –±–∞–Ω–∫—É Mono>")
        return

    name = context.args[0]
    url = context.args[1]

    # –í–∏—Ç—è–≥—É—î–º–æ jar_id –∑ URL
    match = re.search(r"jar/([a-zA-Z0-9]+)", url)
    if not match:
        await update.message.reply_text("‚ùóÔ∏è –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –ø–æ—Å–∏–ª–∞–Ω–Ω—è. –ú–∞—î –º—ñ—Å—Ç–∏—Ç–∏ /jar/<id>")
        return

    jar_id = match.group(1)

    minibankers = context.bot_data.setdefault("minibankers", {})
    minibankers[name] = jar_id

    await update.message.reply_text(
        f"‚úÖ –ú—ñ–Ω—ñ–±–∞–Ω–∫—ñ—Ä–∞ *{escape_markdown_v2(name)}* –¥–æ–¥–∞–Ω–æ",
        parse_mode="MarkdownV2"
    )



def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    app = Application.builder().token(TOKEN).build()

    # –û–±—Ä–æ–±–Ω–∏–∫–∏ –∫–æ–º–∞–Ω–¥ —ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("check_mono_amount", check_mono_amount))
    app.add_handler(CommandHandler("check_privat_amount", check_privat_amount))
    app.add_handler(CommandHandler("check_novapay_amount", check_novapay_amount))
    app.add_handler(CommandHandler("acumulated_sum", acumulated_sum))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CommandHandler("set_goal", set_goal))
    app.add_handler(CommandHandler("set_spent", set_spent))
    app.add_handler(CommandHandler("add_minibanker", add_minibanker))
    app.add_handler(CommandHandler("check_minibanker_progress", check_minibanker_progress))


    # –ó–∞–ø—É—Å–∫–∞—î–º–æ –±–æ—Ç–∞
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ!")
    app.run_polling()


if __name__ == "__main__":
    main()
